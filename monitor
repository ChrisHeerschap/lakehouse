#!/bin/bash

# Debugging set if var "_DEBUG" is non-null
_DEBUG=1
if [[ -n $_DEBUG ]]
then
	exec 2> /tmp/debug
	set -x
fi

##### Shell options
# Enable extended globs
shopt -s extglob

##### VAR DEFS #####
# Use this file for var defs which override these defaults
inifile="$HOME/.monitor.cfg"
# Base dir
dir='/home/cmh/www'
# Set date vars
eval $(/bin/date +"yr=%y mo=%m da=%d h24=%H h12=%I mi=%M pm=%p es=%s")
# Drop the leading zero on the 12h hour value
h12=${h12#0}
# Storage directory
stodir="$dir/storage/$yr/$mo/$da"
# RRD dir
rrddir="$dir/../rrd"
# Output file for the webcam
file="$stodir/$yr$mo$da-$h24$mi.jpg"
# Filename for the most recent file
now="$dir/now.jpg"
# Times to start and stop taking photos
photostart=0600
photostop=1800
# Read the times from an external file if it exists
suntimes=~/.suntimes
if [[ -r $suntimes ]]
then
	. $suntimes
fi
# Swap out this image if the taken photo is too dark
dark="$dir/images/toodark.jpg"
# Swap out this image if we're outside of the camera's time range
nophoto="$dir/images/nophoto.jpg"
# Swap out this image if no camera is detected
nocamera="$dir/images/nocamera.jpg"
# IP of the weather station
weather='192.168.113.11'
# URL of the live data page on the weather station
url="http://${weather}/livedata.htm"
# Output to this HTML page
out="$dir/now.html"
# Track temps in this csv (rotate daily)
csv="$stodir/temp-$yr$mo$da.csv"
# Track CPU temps in this CSV
cpucsv="$stodir/cputemp-$yr$mo$da.csv"
# Low temperature - alert if inside temp is under this (deg F)
lowtemp=48
warntemp=52
# Table background colors: green = okay
inBkg='#CCFFCC'
outBkg='#CCFFCC'
timeBkg='#CCCCFF'
# Default to non-verbose output
NOISE=0

# Grab some vars from the ini file
#  * overrides defaults from above
if [[ -r $inifile ]]
then
	. $inifile
else
	echo "WARNING: ini file $inifile unreadable" >&2
fi

##### FUNCTIONS DEFS #####
function noise {
	(( NOISE )) && echo "$*"
}

# Get my temperature from the DS18B20 1-wire sensor
function mytemp {
	# Read the current temp from the DS18B20 if it is attached
	w1=$(ls /sys/bus/w1/devices/*/w1_slave)
	if [[ -r $w1 ]]
	then
		# Read the temp
		myTemp=$(awk -F= '/t=/ {print $2}' $w1)
		# Convert to millideg F
		myTemp=$((myTemp * 9/5 + 32000))
		# Convert to deg F
		myTemp=${myTemp:0:-3}.${myTemp:0-3}
	fi
}

# Check if we're running from an interactive session
if tty -s
then
	# Can be overridden with "-q" option below
	NOISE=1
fi

# Options processing
while getopts ":qv" opt
do
	case $opt in
		q)	# Run quietly
			NOISE=0;;
		v)	# Run verbosely
			NOISE=1;;
		*)	# Any other option triggers usage
			echo "Usage: $0 [ -q | -v ]"
			echo "	-q	Run quietly"
			echo "	-n	Run verbosely"
			echo
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

# Start off in the web dir
noise "Running in $dir"
cd $dir

# Make the storage dir
mkdir -p $stodir

# Check to see if the onboard camera is connected
#  The "vcgencmd get_camera" returns "supported=# detected=#" where # is 0/1
#  Set these vars using eval so we can just check and see if the camera is detected
#  and skip all the other work
eval $( vcgencmd get_camera )
if (( detected ))
then
	# Take a photo with the onboard camera if the time is between 6am and 6pm
	#  NB: have to specify values as base 10 with "10#" prefix to avoid 08/09 being 
	#      interpreted as bad octal values. Bash will interpret a number with a leading
	#      zero as octal.
	if (( 10#$h24$mi > 10#$photostart && 10#$h24$mi < 10#$photostop ))
	then
		noise "Taking photo with webcam"
		noise "	   file:	$file"
		noise "	current:	$now"
		/usr/bin/raspistill -n -w 640 -h 480 -vf -hf -e jpg -awb fluorescent -x none -ev +1 -sa 0 -o $file -l $now

		# Check to see if the image is too dark
		noise "Checking photo exposure"
		mean="$(identify -format '%[mean]' $now)"
		# Drop the decimal (bash doesn't understand fp numbers)
		mean="${mean%%.*}"

		# 1000 seems to be a good level to qualify as "too dark".
		if (( mean < 1000 ))
		then
			noise "Replacing photo with \"too dark\" message"
			rm $now
			ln -s $dark $now
		fi
	else
		# Outside the camera's runtime (aka night) - swap in the no photo image
		noise "Skipping photo due to time"
		if [[ ! $now -ef $nophoto ]]
		then
			rm $now
			ln -s $nophoto $now
		fi
	fi
else
	# Stuff to do when the camera isn't there.
	if [[ ! $now -ef $nocamera ]]
	then
		rm $now
		ln -s $nocamera $now
	fi
fi

# Get the temp from my DS18B20 temp sensor (if attached)
mytemp

# Get the temps from the weather station
#  * Grab the live data page
#  * grep the lines for inside and outside temp and humidity
#  * output them in the form "inTemp=64.2"
#  * eval those lines to set the values in those variables
noise "Getting temp/humidity info from weather station"
for try in {1..3}
do
	# Get times before and after trying to connect to the weather station
	before=$(date +%s)
	eval $(curl -s $url | egrep "(in|out)(Temp|Humi)" | cut -f 4,14 -d'"' --output-delimiter='=')
	exitstat=$?
	after=$(date +%s)

	# DEBUGGING: Update runtime and temps to debugging CSV
	echo "${before},$((after-before)),${exitstat},${inTemp},${outTemp}" >> ~/tmp/monitor-debug.csv

	# Exit the loop if we have a valid reading for inTemp
	if [[ $inTemp == +([0-9]).[0-9] ]]
	then
		break
	else
		# We don't have a valid inTemp reading. Alert on that.
		# Check to see if it's alive
		fping -q $weather && wstat='alive' || wstat='dead'
		# Mail this line to the first address in alert.
		echo "Null value for inTemp, try $try in $((after-before)) seconds - $weather is $wstat" | mail -s 'LakePi temp error' ${alert%%,*}
	fi
done

# Use my temp over the weather station if it's set
refTemp=${myTemp:-$inTemp}

# Trim decimal places if refTemp has too many
#  Todo: figure out how to nicely trim arbitrary number of decimal places to one
if [[ $refTemp == *.??? ]]
then
	refTemp=${refTemp%??}
fi

# Alert if it's too cold
if (( ${refTemp%%.*} < lowtemp ))
then
	# Set table background to red to indicate alert
	inBkg='#ffcccc'
	# Send an alert if it's set
	if [[ -n $alert ]]
	then
		# Send an alert on the low temp condition
		noise "Alerting on low temp condition ($inTemp)"
		echo "ALERT: Inside temp is $refTemp!" | mail -s "ALERT: Lakehouse temp" $alert
	else
		# alert address not set! Log some errors and hope they're seen
		msg="WARNING: No alert address set and current temp: $refTemp"
		logger -t MONITOR -p user.crit "$msg"
		echo "$msg" >&2
	fi
elif (( ${refTemp%.*} < warntemp ))
then
	# Set table background to orange to indicate warning
	inBkg='#ffcc99'
fi

# Tag the background if it's under freezing outside
if (( ${outTemp%.*} < 32 ))
then
	outBkg='#ffcc99'
fi

# Log the values to the csv file
noise "Updating data points to CSV file $csv"
echo "$es,$inTemp,$inHumi,$outTemp,$outHumi${myTemp:+,}$myTemp" >> $csv

# Get the CPU temp
cpuTempC=$(< /sys/class/thermal/thermal_zone0/temp)
# convert to fahrenheit (preserving the x1000 scale to fake FP math)
cpuTemp=$((cpuTempC*9/5+32000))
# convert to decimal
cpuTemp="${cpuTemp:0:-3}.${cpuTemp:0-3}"
# Log it to CSV
echo "$es,$cpuTemp" >> $cpucsv
#logger -t cpuTemp -p user.info "got cpu temp $cpuTemp at timestamp $es"
# Check it and alert if it's ridiculously high
if (( cpuTempC > 80000 ))
then
	echo "CPU temp high - $cpuTemp" | mail -s "LakePi CPU temp alert" $alert
fi

# Update the RRD files and graphs
for rrd in inTemp outTemp cpuTemp myTemp
do
	# Don't update if the value is null.
	if [[ -z $(eval echo \$$rrd) ]]
	then
		noise "Null value for $rrd - skipping the update"
		continue
	fi

	# Update the RRD file
	noise "Updating the RRD graph $rrd"
	/usr/bin/rrdtool update $rrddir/${rrd}.rrd $es:$(eval echo \$$rrd)
	# Regenerate the graphs - disabled as I'm not currently using them
	#/usr/bin/rrdtool graph $dir/${rrd}.png DEF:temp=$rrddir/${rrd}.rrd:${rrd}:AVERAGE LINE2:temp#00FF00 > /dev/null
done

# One graph to graph them all
#  * Inside temp from weatherstation in green
#  * Outside temp from weatherstation in black
#  * Inside temp from Pi sensor in blue
#  * Dashed horizontal line at freezing in cyan
#  * Dashed horizontal line at the low temp alert point in orange
/usr/bin/rrdtool graph $dir/tempGraph.png -w 640 -h 320 -D \
	"DEF:inTemp=$rrddir/inTemp.rrd:inTemp:AVERAGE" "LINE4:inTemp#00FF00:Inside" \
	"DEF:outTemp=$rrddir/outTemp.rrd:outTemp:AVERAGE" "LINE2:outTemp#000000:outside" \
	"DEF:myTemp=$rrddir/myTemp.rrd:myTemp:AVERAGE" "LINE2:myTemp#0000FF:Pi temp" \
	"HRULE:$warntemp#FF9900:Low warning:dashes" \
	"HRULE:$lowtemp#FF0000:Low alert:dashes" \
	"HRULE:32#00FFFF:Freezing" > /dev/null


# Write the HTML status file
noise "Updating HTML file"
cat << EOF > $out
<HEAD>
<meta http-equiv="refresh" content="300">
<TITLE>Monitor</TITLE>
</HEAD>
<BODY>
<TABLE CELLPADDING=10>
  <!-- <TR VALIGN=CENTER><TD ALIGN=CENTER COLSPAN=3><H1>Webcam</H1></TD></TR> -->
  <!-- <TR VALIGN=CENTER><TD ALIGN=CENTER COLSPAN=3><IMG SRC=now.jpg></TD></TR>
       <TR VALIGN=CENTER><TD ALIGN=RIGHT COLSPAN=3>Photo last updated: $(/bin/date -d @$(stat -c %Y $now) +"%m/%d/%y %l:%M %P")</TD></TR> -->
<TR VALIGN=CENTER><TD ALIGN=CENTER COLSPAN=3><IMG SRC=lake.jpg></TD></TR>
<TR VALIGN=CENTER><TD ALIGN=RIGHT><FONT SIZE=+10>Inside temp</TD><TH BGCOLOR=$inBkg><FONT SIZE=+10>$refTemp</TH><TD><FONT SIZE=+7>F</TD></TR>
  <!-- <TR VALIGN=CENTER><TD ALIGN=RIGHT><FONT SIZE=+10>Inside humidity</TD><TH BGCOLOR=#FFCCCC><FONT SIZE=+10>${inHumi}.0</TH><TD><FONT SIZE=+7>%</TD></TR> -->
<TR VALIGN=CENTER><TD ALIGN=RIGHT><FONT SIZE=+10>Outside temp</TD><TH BGCOLOR=$outBkg><FONT SIZE=+10>$outTemp</TH><TD><FONT SIZE=+7>F</TD></TR>
<TR VALIGN=CENTER><TD ALIGN=RIGHT><FONT SIZE=+10>Last run</TD><TH BGCOLOR=$timeBkg><FONT SIZE=+10>$h12:$mi</TH><TD><FONT SIZE=+7>$pm</TD></TR>
  <!-- <TR VALIGN=CENTER><TD ALIGN=RIGHT><FONT SIZE=+10>Outside humidity</TD><TH BGCOLOR=#FFCCCC><FONT SIZE=+10>${outHumi}.0</TH><TD><FONT SIZE=+7>%</TD></TR> -->
  <!-- <TR VALIGN=CENTER><TD ALIGN=RIGHT COLSPAN=3>Temp last updated: $mo/$da/$yr $h12:$mi $pm</TD></TR> -->
<TR VALIGN=CENTER><TD ALIGN=CENTER COLSPAN=3>Temperature trends:<BR><IMG SRC=tempGraph.png></TD></TR>
  <!-- <TR VALIGN=CENTER><TD ALIGN=CENTER COLSPAN=3>Inside temperature:<BR><IMG SRC=inTemp.png></TD></TR>
<TR VALIGN=CENTER><TD ALIGN=CENTER COLSPAN=3>Outside temperature:<BR><IMG SRC=outTemp.png></TD></TR> -->
<TR VALIGN=CENTER><TD ALIGN=CENTER COLSPAN=3>More weather info/history available on <A HREF=http://www.wunderground.com/personal-weather-station/dashboard?ID=KPAPAUPA2 TARGET="_blank">Wunderground</A></TD></TR>
</TD></TR></TABLE>
</BODY>
EOF


##### END #####
noise "	...completed successfully!"
exit 0
